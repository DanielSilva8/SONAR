  <script src="http://code.jquery.com/jquery-latest.min.js"
        type="text/javascript"></script>
  <%= javascript_include_tag 'jquery.canvasjs.min', 'data-turbolinks-track': 'reload' %>

  <div class="row">
  <div class="col-md-6">
  	<h1>Sensor: <%= @sensor.getName %></h1>
  	<h2 class="hidden-xs">Ref: <%= @sensor.getRef %></h2>
  	</div>

  <div class="col-md-6" style="text-align: right;">
  <% if @groupstate %>
    <a href=<%="/group/"+ @group %>  class="btn btn-primary btn-lg"> See Group </a>
    <% end %>
  	<% if @sensor.getState == 1 %>
         <h1>State: <font color="green">Online</font></h1>
         <a href=<%="/sensor/realtime/"+ @sensor.getRef%>  class="btn btn-primary btn-lg"> Real Time </a>  
  	<% else %>
         <h1>State: <font color="red">Offline</font></h1>
  	<% end %>
    
  </div>
</div>
  <hr></hr>

   <div class="row">
        <div class="col-md-6">
            <table class="table">
                <thead>
                    <tr>
                        <th>
                            Acoustic
                        </th>
                        <th>
                            Location
                        </th>
                        <th>
                            Date
                        </th>
                    </tr>
                </thead>
                <tbody>
                <% @readings.each do |i| %>
                    <tr class="active">                        
                        <td>
                            <%= i.getAco %>                           
                        </td>                     
                        <td>
                            <%= i.getLat %>,<br class="visible-xs"><%= i.getLon %>
                        </td>
                        <td>
                            <%= i.getDate %>                           
                        </td> 
                    </tr>
                    <% end %>
                </tbody>
            </table>
        </div>
        <div class="col-md-6">
        	
        	<div id="googleMap" style="width:100%;height:400px; position: relative; overflow: hidden;">
	</div>
        </div>
    </div>
    
      <hr></hr>

    <div class="row">
    <div class="col-md-6">
        <h1>Last 24h:</h1>
    	<div id="chartContainerLast24" style="height: 300px; width: 100%;"></div>
    </div>
    <div class="col-md-6">
         <h1>Last Month:</h1>
        <div id="chartContainerLastMonth" style="height: 300px; width: 100%;"></div>
    </div>
    </div>



    <!-- SCRIPTS-->

    <script type="text/javascript">
$(function () {
  
  var array = <%= raw @graph.to_json.html_safe %>;
  var info = [];
           for (i = 0; i < array.length; i++) {
            console.log(array[i].aco)
            console.log(array[i].date)
            info[i] = {x: new Date(array[i].date), y: array[i].aco}
           }
  var array1 = <%= raw @graph.to_json.html_safe %>;
  var info2 = [];
           for (i = 0; i < array1.length; i++) {
            info2[i] = {x: new Date(array1[i].date), y: array1[i].aco}
           }

	//Better to construct options first and then pass it as a parameter
	var options24 = {
		exportEnabled: true,
                animationEnabled: true,
      axisY:{
        title: "Acoustic"
      },
		
		data: [
		{
			type: "splineArea", //change it to line, area, bar, pie, etc
			dataPoints: info
      }
      ]

	};

	var optionsMonth = {
		exportEnabled: true,
                animationEnabled: true,
      axisY:{
        title: "Acoustic"
      },
		
		data: [
		{
			type: "splineArea", //change it to line, area, bar, pie, etc
			dataPoints: info2
      }
      ]

	};

	$("#chartContainerLast24").CanvasJSChart(options24);
	$("#chartContainerLastMonth").CanvasJSChart(optionsMonth);

});
</script>

<script>
function myMap() {
	var stylearray=[{"featureType":"administrative","elementType":"all","stylers":[{"visibility":"simplified"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"visibility":"simplified"},{"color":"#fcfcfc"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"visibility":"simplified"},{"color":"#fcfcfc"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"visibility":"simplified"},{"color":"#dddddd"}]},{"featureType":"road.highway","elementType":"geometry.fill","stylers":[{"hue":"#ff0000"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"hue":"#ff0000"}]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[{"hue":"#ff0000"}]},{"featureType":"road.highway","elementType":"labels.text.stroke","stylers":[{"hue":"#ff0000"}]},{"featureType":"road.highway.controlled_access","elementType":"geometry.fill","stylers":[{"hue":"#ff0000"}]},{"featureType":"road.highway.controlled_access","elementType":"labels.text.fill","stylers":[{"hue":"#ff0000"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"visibility":"simplified"},{"color":"#dddddd"}]},{"featureType":"road.local","elementType":"geometry","stylers":[{"visibility":"simplified"},{"color":"#eeeeee"}]},{"featureType":"transit.station.airport","elementType":"geometry.fill","stylers":[{"hue":"#ff0000"}]},{"featureType":"transit.station.airport","elementType":"geometry.stroke","stylers":[{"hue":"#ff0000"}]},{"featureType":"transit.station.airport","elementType":"labels.text.fill","stylers":[{"hue":"#ff0000"}]},{"featureType":"transit.station.airport","elementType":"labels.text.stroke","stylers":[{"hue":"#ff0000"}]}, {
    "featureType": 'water',
    "elementType": 'geometry.fill',
    "stylers": [
      { "color": '#adc9b8' }
    ]
  }];


var mapProp= {

    center:new google.maps.LatLng( <%= @sensor.getLat %>,<%= @sensor.getLon %>),
    zoom:12,
    mapTypeControlOptions: {
    mapTypeIds: ['Styled'] },
     disableDefaultUI: true, 
    mapTypeId: 'Styled'
  
};
var map=new google.maps.Map(document.getElementById("googleMap"),mapProp);

var styledMapType = new google.maps.StyledMapType(stylearray, { name: 'Styled' });
  map.mapTypes.set('Styled', styledMapType);

google.maps.event.addDomListener(window, "resize", function() {
   var center = map.getCenter();
   google.maps.event.trigger(map, "resize");
   map.setCenter(center); 
});

TestMarker(map);

}

function addMarker(location, map) {
        marker = new google.maps.Marker({
            position: location,
            map: map
        });
    }

 // Testing the addMarker function
    function TestMarker(map) {
           CentralPark = new google.maps.LatLng(<%= @sensor.getLat %>,<%= @sensor.getLon %>);
           addMarker(CentralPark, map);
    }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBn-hxl_aRNofeipf4XGBt0eiwYysbFsHI&callback=myMap"></script>